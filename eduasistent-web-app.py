# app.py
import streamlit as st
import pandas as pd
import os
import re
import tempfile
import OpenAI

# Nastaven√≠ str√°nky
st.set_page_config(
    page_title="EDUasistent - Hodnocen√≠ text≈Ø",
    page_icon="üìù",
    layout="wide"
)

# Nadpis a √∫vod
st.title("üìù EDUasistent - Hodnocen√≠ text≈Ø")
st.markdown("""
    Aplikace pro automatick√© porovn√°n√≠ a hodnocen√≠ text≈Ø ≈æ√°k≈Ø v≈Øƒçi vzorov√©mu textu pomoc√≠ AI.
    
    Nahrajte vzorov√Ω text a pr√°ce ≈æ√°k≈Ø pro z√≠sk√°n√≠ zpƒõtn√© vazby.
""")

# Inicializace session state pro uchov√°n√≠ dat mezi refreshi str√°nky
if 'openai_api_key' not in st.session_state:
    st.session_state.openai_api_key = ""
if 'results' not in st.session_state:
    st.session_state.results = []
if 'temp_dir' not in st.session_state:
    st.session_state.temp_dir = tempfile.mkdtemp()

# Sidebar pro nastaven√≠
with st.sidebar:
    st.header("Nastaven√≠")
    
    api_key = st.text_input("OpenAI API kl√≠ƒç:", 
                           value=st.session_state.openai_api_key,
                           type="password",
                           help="Zadejte v√°≈° OpenAI API kl√≠ƒç")
    
    if api_key != st.session_state.openai_api_key:
        st.session_state.openai_api_key = api_key
    
    st.markdown("---")
    
    model = st.selectbox(
        "Model AI:",
        ["gpt-3.5-turbo", "gpt-4"],
        index=0,
        help="Vyberte AI model pro anal√Ωzu text≈Ø"
    )
    
    temperature = st.slider(
        "Kreativita modelu:",
        min_value=0.0,
        max_value=1.0,
        value=0.3,
        step=0.1,
        help="Ni≈æ≈°√≠ hodnota = konzistentnƒõj≈°√≠ odpovƒõdi, vy≈°≈°√≠ hodnota = kreativnƒõj≈°√≠ odpovƒõdi"
    )
    
    st.markdown("---")
    
    export_format = st.selectbox(
        "Form√°t exportu v√Ωsledk≈Ø:",
        ["CSV", "Excel"],
        index=0
    )
    
    st.markdown("---")
    
    st.info("Vytvo≈ôeno na z√°kladƒõ p≈Øvodn√≠ho Jupyter notebooku EDUasistent.")

# Funkce pro anal√Ωzu textu
def analyze_text(reference_text, student_text, api_key, model, temperature):
    prompt = f"""
Porovnej n√°sleduj√≠c√≠ text ≈æ√°ka s ide√°ln√≠m vzorov√Ωm textem. Uveƒè:

1. Hlavn√≠ rozd√≠ly, chyby nebo nedostatky.
2. Doporuƒçen√≠ k vylep≈°en√≠.
3. Odhadni celkov√© hodnocen√≠ na stupnici 1 (nejhor≈°√≠) a≈æ 5 (v√Ωborn√©).

--- VZOR ---
{reference_text}

--- ≈Ω√ÅK ---
{student_text}

Odpovƒõƒè formuluj ƒçesky, p≈ôehlednƒõ.
"""
    try:
        client = OpenAI(api_key=api_key)
        response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "user", "content": prompt}
            ],
            temperature=temperature
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"Chyba: {str(e)}"

# Hlavn√≠ ƒç√°st aplikace
col1, col2 = st.columns(2)

with col1:
    st.header("Nahr√°n√≠ soubor≈Ø")
    
    # Nahr√°n√≠ vzorov√©ho textu
    st.subheader("1. Nahrajte vzorov√Ω text")
    reference_file = st.file_uploader("Vzorov√Ω text (*.txt)", type="txt", key="reference")
    
    if reference_file:
        try:
            reference_text = reference_file.getvalue().decode("utf-8")
            with st.expander("N√°hled vzorov√©ho textu"):
                st.text_area("Vzorov√Ω text:", reference_text, height=200, disabled=True)
        except UnicodeDecodeError:
            try:
                reference_text = reference_file.getvalue().decode("windows-1250")
                with st.expander("N√°hled vzorov√©ho textu"):
                    st.text_area("Vzorov√Ω text:", reference_text, height=200, disabled=True)
            except:
                st.error("Nepoda≈ôilo se naƒç√≠st vzorov√Ω text. Zkontrolujte k√≥dov√°n√≠ souboru.")
                reference_text = None
    else:
        reference_text = None
    
    # Nahr√°n√≠ prac√≠ ≈æ√°k≈Ø
    st.subheader("2. Nahrajte texty ≈æ√°k≈Ø")
    student_files = st.file_uploader("Pr√°ce ≈æ√°k≈Ø (*.txt)", type="txt", accept_multiple_files=True, key="students")
    
    if student_files:
        st.success(f"Nahr√°no {len(student_files)} soubor≈Ø.")
    
    # Tlaƒç√≠tko pro anal√Ωzu
    st.subheader("3. Spus≈•te anal√Ωzu")
    analyze_button = st.button("üîç Analyzovat texty", type="primary", disabled=(not reference_text or not student_files or not st.session_state.openai_api_key))
    
    if analyze_button and reference_text and student_files and st.session_state.openai_api_key:
        results = []
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        for i, file in enumerate(student_files):
            status_text.text(f"Analyzuji soubor {i+1}/{len(student_files)}: {file.name}")
            try:
                try:
                    student_text = file.getvalue().decode("utf-8")
                except UnicodeDecodeError:
                    student_text = file.getvalue().decode("windows-1250")
                
                feedback = analyze_text(reference_text, student_text, st.session_state.openai_api_key, model, temperature)
                
                # Extrahujeme hodnocen√≠ z feedbacku
                score_match = re.search(r"(?i)(hodnocen√≠.*?([1-5]))", feedback)
                score = score_match.group(2) if score_match else "?"
                
                results.append({
                    "soubor": file.name,
                    "hodnocen√≠ (1‚Äì5)": score,
                    "zpƒõtn√° vazba": feedback
                })
                
            except Exception as e:
                results.append({
                    "soubor": file.name,
                    "hodnocen√≠ (1‚Äì5)": "X",
                    "zpƒõtn√° vazba": f"Chyba p≈ôi zpracov√°n√≠: {str(e)}"
                })
            
            progress_bar.progress((i + 1) / len(student_files))
        
        status_text.text("Anal√Ωza dokonƒçena!")
        st.session_state.results = results

with col2:
    st.header("V√Ωsledky hodnocen√≠")
    
    if st.session_state.results:
        # V√Ωsledky v tabulce
        df = pd.DataFrame(st.session_state.results)
        st.dataframe(df[["soubor", "hodnocen√≠ (1‚Äì5)"]], use_container_width=True)
        
        # Mo≈ænost sta≈æen√≠ v√Ωsledk≈Ø
        if export_format == "CSV":
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="‚¨áÔ∏è St√°hnout v√Ωsledky (CSV)",
                data=csv,
                file_name="eduasistent_vysledky.csv",
                mime="text/csv",
            )
        else:
            excel_buffer = pd.ExcelWriter("eduasistent_vysledky.xlsx", engine='xlsxwriter')
            df.to_excel(excel_buffer, index=False)
            excel_buffer.close()
            with open("eduasistent_vysledky.xlsx", "rb") as f:
                excel_data = f.read()
            st.download_button(
                label="‚¨áÔ∏è St√°hnout v√Ωsledky (Excel)",
                data=excel_data,
                file_name="eduasistent_vysledky.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        # Detail zpƒõtn√© vazby
        st.subheader("Detail zpƒõtn√© vazby")
        if st.session_state.results:
            selected_file = st.selectbox(
                "Vyberte soubor pro zobrazen√≠ detailu:",
                [result["soubor"] for result in st.session_state.results]
            )
            
            selected_result = next((item for item in st.session_state.results if item["soubor"] == selected_file), None)
            
            if selected_result:
                st.markdown(f"**Hodnocen√≠:** {selected_result['hodnocen√≠ (1‚Äì5)']}/5")
                st.markdown("**Zpƒõtn√° vazba:**")
                st.markdown(selected_result["zpƒõtn√° vazba"])
    else:
        st.info("Zde se zobraz√≠ v√Ωsledky po nahr√°n√≠ soubor≈Ø a spu≈°tƒõn√≠ anal√Ωzy.")

# Footer
st.markdown("---")
st.markdown("""
    <div style="text-align: center">
        <p>¬© 2025 EDUasistent | Automatick√© hodnocen√≠ text≈Ø pomoc√≠ AI</p>
    </div>
""", unsafe_allow_html=True)
